name: containerd build + Python tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ "**" ]

permissions:
  contents: read

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      CONTAINERD_ADDRESS: /run/containerd/containerd.sock
      CONTAINERD_NAMESPACE: default
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # --- Build containerd (Go) ---
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: Cache Go build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install build dependencies
        run: |
          sudo apt-get update
          # runc is required by containerd to run OCI containers
          sudo apt-get install -y runc make git gcc

      - name: Build containerd
        run: |
          # If this repository is containerd source, keep as-is.
          # If not, fetch containerd in a subdir:
          if [ ! -f Makefile ] || ! grep -q 'containerd' Makefile; then
            echo "Fetching containerd source..."
            git clone --depth 1 https://github.com/containerd/containerd.git _containerd_src
            cd _containerd_src
          fi
          make
          sudo make install
          containerd --version

      # --- Start containerd daemon ---
      - name: Configure containerd
        run: |
          sudo mkdir -p /etc/containerd
          # generate a default config
          sudo /usr/local/bin/containerd config default | sudo tee /etc/containerd/config.toml > /dev/null
          # (Optional) tweak config here if needed, e.g., cgroup v2, snapshotter

      - name: Start containerd
        run: |
          sudo nohup /usr/local/bin/containerd > /tmp/containerd.log 2>&1 &
          # wait for socket to be ready
          for i in {1..30}; do
            if [ -S /run/containerd/containerd.sock ]; then
              echo "containerd socket is up."
              break
            fi
            echo "Waiting for containerd socket..."
            sleep 2
          done
          sudo ctr version
        shell: bash

      # --- Python tests against containerd ---
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python test dependencies
        run: |
          python -m pip install --upgrade pip
          # If your repo has a requirements file for tests, it will be used.
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          if [ -f tests/requirements.txt ]; then
            pip install -r tests/requirements.txt
          fi
          # Common libs for gRPC testing containerd:
          pip install pytest grpcio protobuf click

      - name: Run Python tests
        env:
          # Export address for your Python client/tests to pick up
          CONTAINERD_ADDRESS: /run/containerd/containerd.sock
          CONTAINERD_NAMESPACE: default
        run: |
          set -eux
          # Example: run only python test suite
          if [ -d tests/python ]; then
            pytest -q tests/python
          else
            # Fallback: run any pytest tests in repo
            pytest -q
          fi

      # --- Diagnostics on failure ---
      - name: Upload containerd logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: containerd-logs
          path: |
            /tmp/containerd.log
            /var/log/syslog
            /var/log/kern.log
          if-no-files-found: ignore
